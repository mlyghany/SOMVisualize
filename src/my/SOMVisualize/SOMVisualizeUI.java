/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SOMVisualizeUI.java
 *
 * Created on Dec 2, 2011, 11:30:55 PM
 */
package my.SOMVisualize;

import java.awt.Color;
import java.io.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyledDocument;
import jxl.*;
import jxl.read.biff.BiffException;
/**
 *
 * @author Mark Lester
 */
public class SOMVisualizeUI extends javax.swing.JFrame {
    
    /** Creates new form SOMVisualizeUI */
    public SOMVisualizeUI() {
        initComponents();
        
        //added code
        inputPanel.setVisible(false);
        resultPanel.setVisible(false);
        consolePanel.setVisible(false);
        
        showStartUpScreen();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        toolBar = new javax.swing.JToolBar();
        newFileButton = new javax.swing.JButton();
        openFileButton = new javax.swing.JButton();
        saveFileButton = new javax.swing.JButton();
        toolBarSeparator1 = new javax.swing.JToolBar.Separator();
        runButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        umatButton = new javax.swing.JButton();
        clustButton = new javax.swing.JButton();
        compButton = new javax.swing.JButton();
        consolePanel = new javax.swing.JScrollPane();
        log = new javax.swing.JTextPane();
        inputPanel = new javax.swing.JScrollPane();
        inputPanelHolder = new javax.swing.JPanel();
        inputDataGroup = new javax.swing.JLabel();
        inputPanelSeparator1 = new javax.swing.JSeparator();
        inputFileLabel = new javax.swing.JLabel();
        inputFileTextField = new javax.swing.JTextField();
        browseToggleButton = new javax.swing.JButton();
        inputFacilityToggleButton = new javax.swing.JButton();
        somDetailsGroup = new javax.swing.JLabel();
        inputPanelSeparator2 = new javax.swing.JSeparator();
        mapWidthLabel = new javax.swing.JLabel();
        mapWidthTextField = new javax.swing.JTextField();
        mapHeightLabel = new javax.swing.JLabel();
        mapHeightTextField = new javax.swing.JTextField();
        initialLearningRateLabel = new javax.swing.JLabel();
        initialLearningRateTextField = new javax.swing.JTextField();
        finalLearningRateLabel = new javax.swing.JLabel();
        finalLearningRateTextField = new javax.swing.JTextField();
        finalLearningRateEnable = new javax.swing.JCheckBox();
        iterationsLabel = new javax.swing.JLabel();
        iterationsTextField = new javax.swing.JTextField();
        learningRateFunctionLabel = new javax.swing.JLabel();
        learningRateFunctionCombo = new javax.swing.JComboBox();
        neighborhoodFunctionLabel = new javax.swing.JLabel();
        neighborhoodFunctionCombo = new javax.swing.JComboBox();
        nodeInfluenceFunctionLabel = new javax.swing.JLabel();
        nodeInfluenceFunctionCombo = new javax.swing.JComboBox();
        trainButton = new javax.swing.JButton();
        uMatrixDetailsGroup = new javax.swing.JLabel();
        inputPanelSeparator3 = new javax.swing.JSeparator();
        neighborhoodSizeLabel = new javax.swing.JLabel();
        neighborhoodSizeTextField = new javax.swing.JTextField();
        uMatrixVisualizeButton = new javax.swing.JButton();
        clusterDetailsGroup = new javax.swing.JLabel();
        inputPanelSeparator4 = new javax.swing.JSeparator();
        numberOfClustersLabel = new javax.swing.JLabel();
        clusterVisualizeButton = new javax.swing.JButton();
        componentPlaneDetailsGroup = new javax.swing.JLabel();
        inputPanelSeparator5 = new javax.swing.JSeparator();
        componentPlaneVisualizeButton = new javax.swing.JButton();
        numberOfClustersTextField = new javax.swing.JTextField();
        gisDetailsGroup = new javax.swing.JLabel();
        inputPanelSeparator6 = new javax.swing.JSeparator();
        gisVisualizeButton = new javax.swing.JButton();
        iterationsClustersLabel = new javax.swing.JLabel();
        iterationsClustersTextField = new javax.swing.JTextField();
        clustersIdLabel = new javax.swing.JLabel();
        clustersIdTextField = new javax.swing.JTextField();
        resultPanel = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newFileMenu = new javax.swing.JMenuItem();
        openFileMenu = new javax.swing.JMenuItem();
        saveFileMenu = new javax.swing.JMenuItem();
        saveAsFileMenu = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jFileChooser1.getAccessibleContext().setAccessibleDescription("");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SOM Visualize");

        toolBar.setFloatable(false);
        toolBar.setRollover(true);

        newFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/SOMVisualize/Icons/NewFileIcon.png"))); // NOI18N
        newFileButton.setToolTipText("New File");
        newFileButton.setFocusable(false);
        newFileButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newFileButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileButtonActionPerformed(evt);
            }
        });
        toolBar.add(newFileButton);

        openFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/SOMVisualize/Icons/OpenFileIcon.png"))); // NOI18N
        openFileButton.setToolTipText("Open File");
        openFileButton.setFocusable(false);
        openFileButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openFileButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileButtonActionPerformed(evt);
            }
        });
        toolBar.add(openFileButton);

        saveFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/SOMVisualize/Icons/SaveFileIcon.png"))); // NOI18N
        saveFileButton.setToolTipText("Save File");
        saveFileButton.setFocusable(false);
        saveFileButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveFileButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileButtonActionPerformed(evt);
            }
        });
        toolBar.add(saveFileButton);
        toolBar.add(toolBarSeparator1);

        runButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/SOMVisualize/Icons/RunIcon.png"))); // NOI18N
        runButton.setToolTipText("Run SOM Training");
        runButton.setEnabled(false);
        runButton.setFocusable(false);
        runButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        runButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        toolBar.add(runButton);

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/SOMVisualize/Icons/StopIcon.png"))); // NOI18N
        stopButton.setToolTipText("Stop SOM Training");
        stopButton.setEnabled(false);
        stopButton.setFocusable(false);
        stopButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        toolBar.add(stopButton);

        pauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/SOMVisualize/Icons/PauseIcon.png"))); // NOI18N
        pauseButton.setToolTipText("Pause SOM Training");
        pauseButton.setEnabled(false);
        pauseButton.setFocusable(false);
        pauseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pauseButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });
        toolBar.add(pauseButton);
        toolBar.add(jSeparator1);

        umatButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/SOMVisualize/Icons/UmatVis.png"))); // NOI18N
        umatButton.setToolTipText("Visualize U-matrix");
        umatButton.setEnabled(false);
        umatButton.setFocusable(false);
        umatButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        umatButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        umatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                umatButtonActionPerformed(evt);
            }
        });
        toolBar.add(umatButton);

        clustButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/SOMVisualize/Icons/ClustVis.png"))); // NOI18N
        clustButton.setToolTipText("Visualize Clusters");
        clustButton.setEnabled(false);
        clustButton.setFocusable(false);
        clustButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clustButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        clustButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clustButtonActionPerformed(evt);
            }
        });
        toolBar.add(clustButton);

        compButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/SOMVisualize/Icons/CompVis.png"))); // NOI18N
        compButton.setToolTipText("Visualize Component Planes");
        compButton.setEnabled(false);
        compButton.setFocusable(false);
        compButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        compButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        compButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compButtonActionPerformed(evt);
            }
        });
        toolBar.add(compButton);

        log.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        consolePanel.setViewportView(log);

        inputPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        inputPanel.setToolTipText("");
        inputPanel.setInheritsPopupMenu(true);

        inputPanelHolder.setEnabled(false);

        inputDataGroup.setFont(new java.awt.Font("Tahoma", 1, 11));
        inputDataGroup.setText("Input Data");

        inputFileLabel.setText("Input File");

        inputFileTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFileTextFieldActionPerformed(evt);
            }
        });

        browseToggleButton.setText("...");
        browseToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseToggleButtonActionPerformed(evt);
            }
        });

        inputFacilityToggleButton.setText("Use Input Facility");
        inputFacilityToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputFacilityToggleButtonActionPerformed(evt);
            }
        });

        somDetailsGroup.setFont(new java.awt.Font("Tahoma", 1, 11));
        somDetailsGroup.setText("SOM Details");

        mapWidthLabel.setText("Map Width");

        mapWidthTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                mapWidthTextFieldCaretUpdate(evt);
            }
        });
        mapWidthTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapWidthTextFieldActionPerformed(evt);
            }
        });

        mapHeightLabel.setText("Map Height");

        mapHeightTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                mapHeightTextFieldCaretUpdate(evt);
            }
        });

        initialLearningRateLabel.setText("<html>\nInitial <br>\nLearning Rate\n</html>");

        initialLearningRateTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                initialLearningRateTextFieldCaretUpdate(evt);
            }
        });

        finalLearningRateLabel.setText("<html> Final <br> Learning Rate </html>");
        finalLearningRateLabel.setEnabled(false);

        finalLearningRateTextField.setEnabled(false);
        finalLearningRateTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                finalLearningRateTextFieldCaretUpdate(evt);
            }
        });

        finalLearningRateEnable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalLearningRateEnableActionPerformed(evt);
            }
        });

        iterationsLabel.setText("Iterations");

        iterationsTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                iterationsTextFieldCaretUpdate(evt);
            }
        });

        learningRateFunctionLabel.setText("<html> Learning Rate <br> Function</html>");

        learningRateFunctionCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Exponential", "Power Series" }));
        learningRateFunctionCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                learningRateFunctionComboActionPerformed(evt);
            }
        });

        neighborhoodFunctionLabel.setText("<html> Neighborhood <br> Function </html>");

        neighborhoodFunctionCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Exponential" }));
        neighborhoodFunctionCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                neighborhoodFunctionComboActionPerformed(evt);
            }
        });

        nodeInfluenceFunctionLabel.setText("<html> Node Influence <br> Function </html>");

        nodeInfluenceFunctionCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gaussian" }));
        nodeInfluenceFunctionCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodeInfluenceFunctionComboActionPerformed(evt);
            }
        });

        trainButton.setText("Train");
        trainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainButtonActionPerformed(evt);
            }
        });

        uMatrixDetailsGroup.setFont(new java.awt.Font("Tahoma", 1, 11));
        uMatrixDetailsGroup.setText("U-matrix Details");

        neighborhoodSizeLabel.setText("Neighborhood Size");

        neighborhoodSizeTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                neighborhoodSizeTextFieldCaretUpdate(evt);
            }
        });

        uMatrixVisualizeButton.setText("Visualize");
        uMatrixVisualizeButton.setEnabled(false);
        uMatrixVisualizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uMatrixVisualizeButtonActionPerformed(evt);
            }
        });

        clusterDetailsGroup.setFont(new java.awt.Font("Tahoma", 1, 11));
        clusterDetailsGroup.setText("Cluster Details");

        numberOfClustersLabel.setText("Number of Clusters");

        clusterVisualizeButton.setText("Visualize");
        clusterVisualizeButton.setEnabled(false);
        clusterVisualizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clusterVisualizeButtonActionPerformed(evt);
            }
        });

        componentPlaneDetailsGroup.setFont(new java.awt.Font("Tahoma", 1, 11));
        componentPlaneDetailsGroup.setText("Component Plane Details");

        componentPlaneVisualizeButton.setText("Visualize");
        componentPlaneVisualizeButton.setEnabled(false);
        componentPlaneVisualizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                componentPlaneVisualizeButtonActionPerformed(evt);
            }
        });

        numberOfClustersTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                numberOfClustersTextFieldCaretUpdate(evt);
            }
        });

        gisDetailsGroup.setFont(new java.awt.Font("Tahoma", 1, 11));
        gisDetailsGroup.setText("GIS Details");

        gisVisualizeButton.setText("Visualize");
        gisVisualizeButton.setEnabled(false);
        gisVisualizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gisVisualizeButtonActionPerformed(evt);
            }
        });

        iterationsClustersLabel.setText("Iterations");

        iterationsClustersTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                iterationsClustersTextFieldCaretUpdate(evt);
            }
        });

        clustersIdLabel.setText("Cluster ID");

        clustersIdTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                clustersIdTextFieldCaretUpdate(evt);
            }
        });
        clustersIdTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clustersIdTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inputPanelHolderLayout = new javax.swing.GroupLayout(inputPanelHolder);
        inputPanelHolder.setLayout(inputPanelHolderLayout);
        inputPanelHolderLayout.setHorizontalGroup(
            inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelHolderLayout.createSequentialGroup()
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputPanelHolderLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(neighborhoodSizeLabel)
                            .addComponent(numberOfClustersLabel)))
                    .addGroup(inputPanelHolderLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(iterationsClustersLabel))
                    .addGroup(inputPanelHolderLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(clustersIdLabel)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clustersIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iterationsClustersTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
                .addGap(19, 19, 19))
            .addGroup(inputPanelHolderLayout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(neighborhoodSizeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(inputPanelHolderLayout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(numberOfClustersTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                .addGap(19, 19, 19))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelHolderLayout.createSequentialGroup()
                .addContainerGap(128, Short.MAX_VALUE)
                .addComponent(gisVisualizeButton)
                .addGap(66, 66, 66))
            .addGroup(inputPanelHolderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputDataGroup)
                .addContainerGap(196, Short.MAX_VALUE))
            .addGroup(inputPanelHolderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(somDetailsGroup)
                .addContainerGap(190, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelHolderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nodeInfluenceFunctionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(learningRateFunctionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(neighborhoodFunctionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mapWidthLabel)
                    .addComponent(mapHeightLabel)
                    .addComponent(initialLearningRateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(finalLearningRateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iterationsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mapWidthTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                    .addComponent(initialLearningRateTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                    .addComponent(mapHeightTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                    .addComponent(finalLearningRateTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                    .addComponent(iterationsTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addComponent(finalLearningRateEnable)
                .addGap(19, 19, 19))
            .addGroup(inputPanelHolderLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(neighborhoodFunctionCombo, 0, 120, Short.MAX_VALUE)
                .addContainerGap(54, Short.MAX_VALUE))
            .addGroup(inputPanelHolderLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(learningRateFunctionCombo, 0, 120, Short.MAX_VALUE)
                .addContainerGap(54, Short.MAX_VALUE))
            .addGroup(inputPanelHolderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(uMatrixDetailsGroup)
                .addContainerGap(164, Short.MAX_VALUE))
            .addGroup(inputPanelHolderLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addComponent(nodeInfluenceFunctionCombo, 0, 120, Short.MAX_VALUE)
                .addContainerGap(54, Short.MAX_VALUE))
            .addGroup(inputPanelHolderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(clusterDetailsGroup)
                .addContainerGap(175, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, inputPanelHolderLayout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(inputFacilityToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                .addGap(42, 42, 42))
            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, inputPanelHolderLayout.createSequentialGroup()
                .addGap(119, 119, 119)
                .addComponent(trainButton)
                .addGap(89, 89, 89))
            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, inputPanelHolderLayout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(uMatrixVisualizeButton)
                .addGap(81, 81, 81))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelHolderLayout.createSequentialGroup()
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(inputPanelSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                    .addComponent(inputPanelSeparator2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                    .addGroup(inputPanelHolderLayout.createSequentialGroup()
                        .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inputPanelHolderLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(inputFileLabel)
                                .addGap(22, 22, 22))
                            .addGroup(inputPanelHolderLayout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addComponent(inputFileTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addComponent(browseToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19))
            .addGroup(inputPanelHolderLayout.createSequentialGroup()
                .addComponent(inputPanelSeparator3, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(inputPanelHolderLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(gisDetailsGroup)
                .addContainerGap(196, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(inputPanelHolderLayout.createSequentialGroup()
                .addComponent(componentPlaneDetailsGroup)
                .addContainerGap(126, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelHolderLayout.createSequentialGroup()
                .addContainerGap(128, Short.MAX_VALUE)
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(clusterVisualizeButton)
                    .addComponent(componentPlaneVisualizeButton))
                .addGap(66, 66, 66))
            .addGroup(inputPanelHolderLayout.createSequentialGroup()
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputPanelSeparator4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                    .addComponent(inputPanelSeparator5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                    .addComponent(inputPanelSeparator6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE))
                .addContainerGap())
        );
        inputPanelHolderLayout.setVerticalGroup(
            inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelHolderLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(inputDataGroup)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputPanelSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(inputFileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputFileLabel)
                    .addComponent(browseToggleButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputFacilityToggleButton)
                .addGap(18, 18, 18)
                .addComponent(somDetailsGroup)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputPanelSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(mapWidthLabel)
                    .addComponent(mapWidthTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(mapHeightLabel)
                    .addComponent(mapHeightTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(initialLearningRateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(initialLearningRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(finalLearningRateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(finalLearningRateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(finalLearningRateEnable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(iterationsLabel)
                    .addComponent(iterationsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(learningRateFunctionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(learningRateFunctionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(neighborhoodFunctionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(neighborhoodFunctionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nodeInfluenceFunctionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nodeInfluenceFunctionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(trainButton)
                .addGap(25, 25, 25)
                .addComponent(uMatrixDetailsGroup)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputPanelSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(neighborhoodSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(neighborhoodSizeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(uMatrixVisualizeButton)
                .addGap(18, 18, 18)
                .addComponent(clusterDetailsGroup)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputPanelSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numberOfClustersLabel)
                    .addComponent(numberOfClustersTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iterationsClustersLabel)
                    .addComponent(iterationsClustersTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(clusterVisualizeButton)
                .addGap(18, 18, 18)
                .addComponent(componentPlaneDetailsGroup)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputPanelSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(componentPlaneVisualizeButton)
                .addGap(18, 18, 18)
                .addComponent(gisDetailsGroup)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputPanelSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(inputPanelHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clustersIdLabel)
                    .addComponent(clustersIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(gisVisualizeButton)
                .addContainerGap())
        );

        mapWidthTextField.getAccessibleContext().setAccessibleName("");

        inputPanel.setViewportView(inputPanelHolder);

        resultPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        fileMenu.setText("File");

        newFileMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newFileMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/SOMVisualize/Icons/NewFileIcon.png"))); // NOI18N
        newFileMenu.setText("New File");
        newFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileMenuActionPerformed(evt);
            }
        });
        fileMenu.add(newFileMenu);

        openFileMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openFileMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/SOMVisualize/Icons/OpenFileIcon.png"))); // NOI18N
        openFileMenu.setText("Open");
        openFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuActionPerformed(evt);
            }
        });
        fileMenu.add(openFileMenu);

        saveFileMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveFileMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/SOMVisualize/Icons/SaveFileIcon.png"))); // NOI18N
        saveFileMenu.setText("Save");
        fileMenu.add(saveFileMenu);

        saveAsFileMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        saveAsFileMenu.setText("Save as...");
        saveAsFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsFileMenuActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsFileMenu);

        jMenuBar1.add(fileMenu);

        jMenu1.setText("Run");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Classify");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        editMenu.setText("Help");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem1.setText("View Tutorial");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        editMenu.add(jMenuItem1);

        jMenuBar1.add(editMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(consolePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 782, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(inputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE))
                    .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                    .addComponent(resultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(consolePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
private void newFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileMenuActionPerformed
    
    //always ensure that there is no current file running else, ask the user if he wants to terminate
    int choice = 0;
    
    if(visFileExists){
        choice = 1;
        Object[] options = {"Yes", "No"};
        choice = JOptionPane.showOptionDialog(this,
            "There is a file currently running. Are you sure you want to create a new file?",
            "Warning",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE,
            null,
            options,
            options[1]);
    }
    
    if(choice == 0){
        //assume there is a file and show everything
        this.setTitle("SOM Visualize - Untitled");

        this.inputPanel.setVisible(true);
        this.resultPanel.setVisible(true);
        this.consolePanel.setVisible(true);

        this.resultPanel.setVisible(false);

        //reset all elements

        /*RESULT*/
        resultPanel.removeAll();

        /*CONSOLE*/
        log.setText("");
        doc = new DefaultStyledDocument();
        cl = new ConsoleLog(log, doc);
        consolePanel.setAutoscrolls(true);

        /*INPUT*/
        this.inputFileTextField.setText("");
        this.mapHeightTextField.setText("");
        this.mapWidthTextField.setText("");
        this.initialLearningRateTextField.setText("");
        this.finalLearningRateTextField.setText("");
        this.iterationsTextField.setText("");
        this.learningRateFunctionCombo.setSelectedIndex(0);
        this.neighborhoodFunctionCombo.setSelectedIndex(0);
        this.nodeInfluenceFunctionCombo.setSelectedIndex(0);
        
        this.neighborhoodSizeTextField.setText("");
        this.numberOfClustersTextField.setText("");
        
        //buttons
        this.uMatrixVisualizeButton.setEnabled(false);
        this.clusterVisualizeButton.setEnabled(false);
        this.componentPlaneVisualizeButton.setEnabled(false);
        this.gisVisualizeButton.setEnabled(false);
        
        //File input and input data
        excelFile = null;
        inputDataClass = null;

        //Trainer and visualizers
        trainer = null;
        umat = null;
        clust = null;
        comp = null;

        //Miscellaneous
        maxMin = null;
        
        //Save File
        saveFile = null;
                
        //Flags
        umatDone = false;
        compDone = false;
        
        //inputFacility
        inputFac = null;
        
        this.visFileExists = true;
        
        runButton.setEnabled(true);
        pauseButton.setEnabled(true);
        stopButton.setEnabled(true);
    }
}//GEN-LAST:event_newFileMenuActionPerformed

private void newFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileButtonActionPerformed
    this.newFileMenu.doClick();
}//GEN-LAST:event_newFileButtonActionPerformed

private void saveFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileButtonActionPerformed
    if(visFileExists){
        if(saveFile == null){
            javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
            int returnVal = fc.showSaveDialog(null);

            if(returnVal == JFileChooser.APPROVE_OPTION){
                saveFile = fc.getSelectedFile();
            }
        }

        //check if the file exists now, then save details to file
        try {
            String fileName;
            if(!(saveFile.getAbsolutePath().contains(".vis"))){
                fileName = saveFile.getAbsolutePath() + ".vis";
            }
            else{
                fileName = saveFile.getAbsolutePath();
            }
            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(fileName));

            /*WRITE NECESSARY DATA FROM INPUT PANEL*/
            out.writeObject(inputFileTextField.getText());
            out.writeObject(mapWidthTextField.getText());
            out.writeObject(mapHeightTextField.getText());
            out.writeObject(initialLearningRateTextField.getText());
            out.writeObject(finalLearningRateTextField.getText());
            out.writeObject(iterationsTextField.getText());
            out.writeObject(learningRateFunctionCombo.getSelectedIndex());
            out.writeObject(neighborhoodFunctionCombo.getSelectedIndex());
            out.writeObject(nodeInfluenceFunctionCombo.getSelectedIndex());

            out.writeObject(neighborhoodSizeTextField.getText());
            out.writeObject(numberOfClustersTextField.getText());

            out.writeObject(trainer);
            out.writeObject(clust);

            out.writeObject(inputDataClass);
            out.writeObject(maxMin);

            out.writeObject(umatDone);
            out.writeObject(compDone);
            
            out.close();

            this.setTitle("SOMVisualize - " + saveFile.getName());

        } catch (IOException ex) {
            Logger.getLogger(SOMVisualizeUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
}//GEN-LAST:event_saveFileButtonActionPerformed

private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
    if(mapTrainer.isAlive()){
        cl.throwErrorMessage("Training has been aborted!\n");
    }
    trainer.stop();
    while(mapTrainer.isAlive()){}
    trainer = null;
    mapTrainer = null;
    
}//GEN-LAST:event_stopButtonActionPerformed

private void mapWidthTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapWidthTextFieldActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_mapWidthTextFieldActionPerformed

private void inputFileTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFileTextFieldActionPerformed

}//GEN-LAST:event_inputFileTextFieldActionPerformed

private void finalLearningRateEnableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalLearningRateEnableActionPerformed
    if (finalLearningRateEnable.isSelected()){
        finalLearningRateTextField.setEnabled(true);
        finalLearningRateLabel.setEnabled(true);
    }
    else{
        finalLearningRateTextField.setEnabled(false);
        finalLearningRateLabel.setEnabled(false);
    }
}//GEN-LAST:event_finalLearningRateEnableActionPerformed

private void learningRateFunctionComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_learningRateFunctionComboActionPerformed

}//GEN-LAST:event_learningRateFunctionComboActionPerformed

private void neighborhoodFunctionComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_neighborhoodFunctionComboActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_neighborhoodFunctionComboActionPerformed

private void nodeInfluenceFunctionComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodeInfluenceFunctionComboActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_nodeInfluenceFunctionComboActionPerformed

private void trainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainButtonActionPerformed
    
    /* Get input data details
     * For now, let it be hard coded
     * If training input is incomplete do not proceed
     */
    int mapWidth;
    int mapHeight;
    double initialLearningRate;
    double finalLearningRate;
    int iterations;
    
    int learningRateFunction;
    int neighborhoodFunction;
    int nodeInfluenceFunction;

      
    try{
        mapWidth = Integer.parseInt(mapWidthTextField.getText());
        mapHeight = Integer.parseInt(mapHeightTextField.getText());
        initialLearningRate = Double.parseDouble(initialLearningRateTextField.getText());
        if(finalLearningRateEnable.isSelected()){
            finalLearningRate = Double.parseDouble(finalLearningRateTextField.getText());     
        }
        else{
            finalLearningRate = 0.0;
        }
        iterations = Integer.parseInt(iterationsTextField.getText());
        
        learningRateFunction = learningRateFunctionCombo.getSelectedIndex() + 1;
        neighborhoodFunction = neighborhoodFunctionCombo.getSelectedIndex() + 1;
        nodeInfluenceFunction = nodeInfluenceFunctionCombo.getSelectedIndex() + 1;
        
        if(mapWidth < 0 || mapHeight < 0 || initialLearningRate < 0 || initialLearningRate > 1 || finalLearningRate < 0 ||
                finalLearningRate > 1 || iterations < 0){
            cl.throwErrorMessage("Invalid Input! \n");
            return;
        }
    }
    catch(NumberFormatException e){
        //Incomplete Input
        cl.throwErrorMessage("Error on Input Parameters. \n");
        cl.throwNormalMessage("Please make sure that all fields have numeric values. \n");
        return;
    }
    
    int choice = 0;
    if(trainer != null){
        Object[] options = {"Yes", "No"};
        choice = JOptionPane.showOptionDialog(this,
            "Are you sure you want to retrain the map?",
            "Warning",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE,
            null,
            options,
            options[1]);
                        
    }
    
    if(choice == 0){
        trainer = null;
        comp = null;
        clust = null;
        umat = null;
        inputDataClass = null;
        resultPanel.removeAll();
        uMatrixVisualizeButton.setEnabled(false);
        clusterVisualizeButton.setEnabled(false);
        componentPlaneVisualizeButton.setEnabled(false);
        gisVisualizeButton.setEnabled(false);
        if(!inputFileTextField.getText().equals("")){
            excelFile = new File(inputFileTextField.getText());
            if(excelFile.getAbsolutePath().matches(".*\\.xls")){
                if(excelFile.exists()){
                    try {
                        Workbook dataWorkbook = Workbook.getWorkbook(excelFile);

                        //get contents of the workbook and store it in an array
                        Sheet dataSheet = dataWorkbook.getSheet(0);
                        double[][] inputData = new double[dataSheet.getRows()-1][dataSheet.getColumns()-1];
                        String[] nodeLabels = new String[dataSheet.getRows()-1];
                        String[] variableHeaders = new String[dataSheet.getColumns()-1];

                        for(int i=0; i<dataSheet.getRows(); i++){

                            if(i==0){
                                Cell[] variableNames = dataSheet.getRow(0);
                                for(int j=1; j<dataSheet.getColumns(); j++){
                                    variableHeaders[j-1] = variableNames[j].getContents();
                                }
                            }
                            else{
                                Cell[] content = dataSheet.getRow(i);
                                nodeLabels[i-1] = content[0].getContents();
                                for(int j=1; j<dataSheet.getColumns(); j++){
                                    inputData[i-1][j-1] = Double.parseDouble(content[j].getContents());
                                }
                            }               
                        }

                        maxMin = new double[inputData[0].length][2]; //0 for max, 1 for min

                        for(int j=0; j<inputData[0].length; j++){
                            double minValue = inputData[0][j];
                            double maxValue = inputData[0][j];
                            for(int i=1; i<inputData.length; i++){
                                if (inputData[i][j] < minValue){
                                    minValue = inputData[i][j];
                                }
                                if (inputData[i][j] > maxValue){
                                    maxValue = inputData[i][j];
                                }
                            }

                            maxMin[j][0] = maxValue;
                            maxMin[j][1] = minValue;

                            for(int i=0; i<inputData.length; i++){
                                inputData[i][j] = (inputData[i][j] - minValue)/(maxValue-minValue);
                                 if(Double.isNaN(inputData[i][j])){
                                    inputData[i][j] = 0;
                                    
                                }
                            }
                        }

                        inputDataClass = new InputData(inputData.length, inputData[0].length);
                        inputDataClass.setDataLabels(nodeLabels);
                        inputDataClass.setInputData(inputData);
                        inputDataClass.setVariableLabels(variableHeaders);

                    }
                    catch (IOException ex) {
                        cl.throwErrorMessage("Error in File Input! \n");
                        return;

                    } 
                    catch (BiffException ex) {
                        //Logger.getLogger(SOMVisualizeUI.class.getName()).log(Level.SEVERE, null, ex);
                        cl.throwErrorMessage("File format not supported. Please check input file. \n");
                        cl.throwNormalMessage("Files should be in .xls or .csv format. \n");
                        return;
                    }
                }
                else{
                    cl.throwErrorMessage("File does not exist!\n");
                    return;
                }
            }
            else if(excelFile.getAbsolutePath().contains(".csv")){

                if(excelFile.exists()){
                    try {
                        BufferedReader bufRdr = new BufferedReader(new FileReader(excelFile));

                        //count number of rows and cols first
                        String line = null;
                        int row = 0;
                        int col = 0;
                        while((line = bufRdr.readLine()) != null){
                            StringTokenizer st = new StringTokenizer(line, ",");

                            if(row == 0){
                                col = st.countTokens();
                            }

                            row++;
                        }

                        //now parse the file
                        bufRdr.close();
                        bufRdr = new BufferedReader(new FileReader(excelFile));

                        String[] variableHeaders = new String[col];
                        String[] nodeLabels = new String[row-1];
                        double[][] inputData = new double[row-1][col];

                        //read Variable Headers

                        line = bufRdr.readLine();
                        StringTokenizer st = new StringTokenizer(line, ",");

                        int j=0;
                        while(st.hasMoreTokens()){
                            variableHeaders[j] = st.nextToken();
                            j++;
                        }

                        for(int i=0; i<row-1; i++){
                            line = bufRdr.readLine();
                            st = new StringTokenizer(line, ",");

                            nodeLabels[i] = st.nextToken();

                            for (j=0; j<col; j++){
                                inputData[i][j] = Double.parseDouble(st.nextToken());
                            }
                        }

                        maxMin = new double[inputData[0].length][2]; //0 for max, 1 for min

                        for(j=0; j<inputData[0].length; j++){
                            double minValue = inputData[0][j];
                            double maxValue = inputData[0][j];
                            for(int i=1; i<inputData.length; i++){
                                if (inputData[i][j] < minValue){
                                    minValue = inputData[i][j];
                                }
                                if (inputData[i][j] > maxValue){
                                    maxValue = inputData[i][j];
                                }
                            }

                            maxMin[j][0] = maxValue;
                            maxMin[j][1] = minValue;

                            for(int i=0; i<inputData.length; i++){
                                inputData[i][j] = (inputData[i][j] - minValue)/(maxValue-minValue);
                            }
                        }


                        inputDataClass = new InputData(inputData.length, inputData[0].length);
                        inputDataClass.setDataLabels(nodeLabels);
                        inputDataClass.setInputData(inputData);
                        inputDataClass.setVariableLabels(variableHeaders);

                    }
                    catch(IOException ex){
                        cl.throwErrorMessage("Error in File Input!\n");
                        return;
                    }
                }
                else{
                    cl.throwErrorMessage("File does not exist!\n");
                    return;
                }
            }
            else{
                cl.throwErrorMessage("File format not supported. Please check input file. \n");
                cl.throwNormalMessage("Files should be in .xls or .csv format. \n");
                return;
            }
        }
        else if(inputFac != null){
            if(inputFac.isReady()){
                
                DefaultTableModel model = inputFac.getModel();
                double[][] inputData = new double[model.getRowCount()][model.getColumnCount()-1];
                String[] variableHeaders = new String[model.getColumnCount()-1];
                String[] nodeLabels = new String[model.getRowCount()];
                
                try{
                    for(int i=0; i<model.getRowCount(); i++){
                        for(int j=0; j<model.getColumnCount()-1; j++){
                            //System.out.println(i + " " + j + " " +model.getValueAt(i, j+1));
                            inputData[i][j] = Double.parseDouble(model.getValueAt(i, j+1).toString());
                        }
                    }
                    
                    for(int i=0; i<model.getRowCount(); i++){
                        nodeLabels[i] = model.getValueAt(i, 0).toString();
                    }
                    
                    for(int j=0; j<model.getColumnCount()-1; j++){
                        variableHeaders[j] = model.getColumnName(j+1);
                    }
                    
                    maxMin = new double[inputData[0].length][2]; //0 for max, 1 for min

                        for(int j=0; j<inputData[0].length; j++){
                            double minValue = inputData[0][j];
                            double maxValue = inputData[0][j];
                            
                            for(int i=1; i<inputData.length; i++){
                                
                                if (inputData[i][j] < minValue){
                                    minValue = inputData[i][j];
                                }
                                if (inputData[i][j] > maxValue){
                                    maxValue = inputData[i][j];
                                }
                            }
                            
                            

                            maxMin[j][0] = maxValue;
                            maxMin[j][1] = minValue;

                            for(int i=0; i<inputData.length; i++){
                                inputData[i][j] = (inputData[i][j] - minValue)/(maxValue-minValue);
                                if(Double.isNaN(inputData[i][j])){
                                    inputData[i][j] = 0;
                                    
                                }
                            }
                        }


                        inputDataClass = new InputData(inputData.length, inputData[0].length);
                        inputDataClass.setDataLabels(nodeLabels);
                        inputDataClass.setInputData(inputData);
                        inputDataClass.setVariableLabels(variableHeaders);
                    
                    
                }
                catch(NumberFormatException e){
                    cl.throwErrorMessage("Error in data input format! \n");
                    return;
                }
                catch(NullPointerException e){
                    cl.throwErrorMessage("Blank input in data! \n");
                    return;
                } 
            }
            else{
                cl.throwErrorMessage("Data has not been submitted! \n");
            }
        }
        else{
            cl.throwErrorMessage("No Input Data Found! \n");
            return;
        }
    }
    
    if(inputDataClass != null && choice == 0){
        /*
         * Train data!
         * Pass arguments INPUTDATA, MAPWIDTH, MAPHEIGHT, INITIALLEARNINGRATE, 
         * FINALLEARNINGRATE, ITERATIONS, LRFUNCTION, NEIGHBORHOODFUNCTION, NODEINFLUENCE
         */
        cl.throwNormalMessage("Training Map. Please wait. \n");
        if(trainer == null){
            //there is no existing trainer. This may be caused by a new instance of the program.
            //or the trainer might have been stopped
            trainer = new SOMTrainer(inputDataClass, mapWidth, mapHeight, initialLearningRate, finalLearningRate, iterations, learningRateFunction,
                    neighborhoodFunction, nodeInfluenceFunction, cl);
             // trainer = new SOMTrainer(inputDataClass, cl);
        }
        
        mapTrainer = new Thread(trainer);
        mapTrainer.start();
        
        
        new Thread(new Enabler()).start();
            
    }
}//GEN-LAST:event_trainButtonActionPerformed

private void uMatrixVisualizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uMatrixVisualizeButtonActionPerformed
    if(Integer.parseInt(neighborhoodSizeTextField.getText()) < 0){
        cl.throwErrorMessage("Invalid Input! \n");
        return;
    }
    
    cl.throwNormalMessage("Visualizing U-Matrix. \n");
    for(int i=0; i<resultPanel.getTabCount(); i++){
        if(resultPanel.getTitleAt(i).equals("U-Matrix")){
            resultPanel.remove(i);
        }
    }
   
   if(neighborhoodSizeTextField.getText().equals("")){
       cl.throwErrorMessage("No Neighborhood Size Specified! \n");
   }
   else{
       try{
           
           
           umatVisualize();
           cl.throwSuccessMessage("U-Matrix Visualization Completed! \n");
           umatDone = true;
       }
       catch(NumberFormatException e){
           cl.throwErrorMessage("Invalid input for Neighborhood Size! \n");
       }
   }
}//GEN-LAST:event_uMatrixVisualizeButtonActionPerformed

private void clusterVisualizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clusterVisualizeButtonActionPerformed
    if(Integer.parseInt(numberOfClustersTextField.getText()) < 0){
        cl.throwErrorMessage("Invalid Input! \n");
        return;
    }
    
    cl.throwNormalMessage("Visualizing Clusters. \n");
    for(int i=0; i<resultPanel.getTabCount(); i++){
        if(resultPanel.getTitleAt(i).equals("Clusters")){
            resultPanel.remove(i);
        }
    }
    
    if(numberOfClustersTextField.getText().equals("")){
        cl.throwErrorMessage("No Cluster Count Specified! \n");
    }
    else if(iterationsClustersTextField.getText().equals("")){
        cl.throwErrorMessage("No iterations Specified! \n");
    }
    else if(Integer.parseInt(iterationsClustersTextField.getText()) < 0 || Integer.parseInt(iterationsClustersTextField.getText()) > 100){
        cl.throwErrorMessage("Error in iteration count! \n");
    }
    else{
        try{
            clustVisualize();
            cl.throwSuccessMessage("Cluster Visualization Completed! \n");
            
        }
        catch(NumberFormatException e){
            cl.throwErrorMessage("Invalid input for Number of Clusters! \n");
        }
        
    }
}//GEN-LAST:event_clusterVisualizeButtonActionPerformed

private void componentPlaneVisualizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_componentPlaneVisualizeButtonActionPerformed
    
    cl.throwNormalMessage("Visualizing Component Planes. \n");
    for(int i=0; i<resultPanel.getTabCount(); i++){
        if(resultPanel.getTitleAt(i).equals("Component Planes")){
            resultPanel.remove(i);
        }
    }
    
    
    compVisualize();
    cl.throwSuccessMessage("Component Plane Visualization Completed! \n");
    compDone = true;
    
        
}//GEN-LAST:event_componentPlaneVisualizeButtonActionPerformed

private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
    if(trainer == null || inputDataClass == null){
        trainButton.doClick();
    }
    else{
        cl.throwNormalMessage("Resuming Training! \n");
        mapTrainer = new Thread(trainer);
        mapTrainer.start();
        
        new Thread(new Enabler()).start();
    }
}//GEN-LAST:event_runButtonActionPerformed

private void browseToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseToggleButtonActionPerformed
// TODO add your handling code here:
   javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
   fc.setName("SOM Visualize");
   
   int returnVal = fc.showOpenDialog(null);
   
   if(returnVal == JFileChooser.APPROVE_OPTION){
       inputFileTextField.setText(fc.getSelectedFile().getAbsolutePath());
       if(!inputFileTextField.getText().equals("")){
            if(fc.getSelectedFile().getAbsolutePath().matches(".*\\.xls")){
                if(fc.getSelectedFile().exists()){
                        try {
                            Workbook dataWorkbook = Workbook.getWorkbook(fc.getSelectedFile());
                            //get contents of the workbook and store it in an array
                            Sheet dataSheet = dataWorkbook.getSheet(0);
                            int dimension = (dataSheet.getColumns()-1) * 10;
                            int size = (int)Math.ceil(Math.sqrt(dimension));
                            mapWidthTextField.setText(Integer.toString(size));
                            mapHeightTextField.setText(Integer.toString(size));
                            iterationsTextField.setText(Integer.toString((int)Math.pow(size,2) * 500));
                        } catch (IOException ex) {
                            Logger.getLogger(SOMVisualizeUI.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (BiffException ex) {
                            Logger.getLogger(SOMVisualizeUI.class.getName()).log(Level.SEVERE, null, ex);
                        }
                }
            }
       }
   }    
}//GEN-LAST:event_browseToggleButtonActionPerformed

private void gisVisualizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gisVisualizeButtonActionPerformed
    
    cl.throwNormalMessage("Generating xml file..\n");
    if(gis == null){
        gis = new MapBrowser("");
    }
    boolean gisFlag = gis.initializeXML(clust[Integer.parseInt(clustersIdTextField.getText())], comp, inputDataClass);
    
    if(gisFlag){
        cl.throwSuccessMessage("\"temp.xml\" successfully generated!");
        gis.runMap();
    }
    
    

}//GEN-LAST:event_gisVisualizeButtonActionPerformed

private void openFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileButtonActionPerformed
    //always ensure that there is no current file running else, ask the user if he wants to terminate
    int choice = 0;
    
    if(visFileExists){
        choice = 1;
        Object[] options = {"Yes", "No"};
        choice = JOptionPane.showOptionDialog(this,
            "There is a file currently running. Are you sure you want to open file?",
            "Warning",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE,
            null,
            options,
            options[1]);
    }
    if(choice == 0){
        javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
   
        int returnVal = fc.showOpenDialog(null);

        if(returnVal == JFileChooser.APPROVE_OPTION){
           File openFile = fc.getSelectedFile();
            
           if(openFile.getAbsolutePath().contains(".vis")){
                try {
                    ObjectInputStream out = new ObjectInputStream(new FileInputStream(openFile.getAbsolutePath()));
                    
                    try {
                        //This would be the save file
                        saveFile = openFile;
                                             

                        //Get values first
                        String inputFile = out.readObject().toString();
                        String mapWidth = out.readObject().toString();
                        String mapHeight = out.readObject().toString();
                        String initialLearningRate = out.readObject().toString();
                        String finalLearningRate = out.readObject().toString();
                        String iterations = out.readObject().toString();
                        int learningRateFunction = (Integer)out.readObject();
                        int neighborhoodFunction = (Integer)out.readObject();
                        int nodeInfluenceFunction = (Integer)out.readObject();
                        
                        String neighborhoodSize = out.readObject().toString();
                        String numberOfClusters = out.readObject().toString();
                        
                        trainer = (SOMTrainer)out.readObject();
                        clust = (Cluster[])out.readObject();

                        inputDataClass = (InputData)out.readObject();
                        maxMin = (double[][])out.readObject();

                        umatDone = (Boolean)out.readObject();

                        compDone = (Boolean)out.readObject();
                        
                        out.close();
                        
                        inputPanel.setVisible(true);
                        consolePanel.setVisible(true);
                        resultPanel.setVisible(true);
                        resultPanel.setVisible(false);
                        
                        
                        //Reset Log
                        resultPanel.removeAll();
                        log.setText("");
                        
                        doc = new DefaultStyledDocument();
                        cl = new ConsoleLog(log,doc);
                        
                        inputFileTextField.setText(inputFile);
                        mapWidthTextField.setText(mapWidth);
                        mapHeightTextField.setText(mapHeight);
                        initialLearningRateTextField.setText(initialLearningRate);
                        finalLearningRateTextField.setText(finalLearningRate);
                        iterationsTextField.setText(iterations);
                        learningRateFunctionCombo.setSelectedIndex(learningRateFunction);
                        neighborhoodFunctionCombo.setSelectedIndex(neighborhoodFunction);
                        nodeInfluenceFunctionCombo.setSelectedIndex(nodeInfluenceFunction);

                        neighborhoodSizeTextField.setText(neighborhoodSize);
                        numberOfClustersTextField.setText(numberOfClusters);
                        

                        if(trainer != null){
                            trainer.setCl(cl);
                            if(trainer.isDoneTraining()){
                                LatticePainter lp = new LatticePainter(trainer.getLattice(), inputDataClass);
                                lp.setBounds(0,0,450,480);
                                resultPanel.add("SOM Lattice",lp);
                                
                                uMatrixVisualizeButton.setEnabled(true);
                                clusterVisualizeButton.setEnabled(true);
                                componentPlaneVisualizeButton.setEnabled(true);
                                
                                umatButton.setEnabled(true);
                                clustButton.setEnabled(true);
                                compButton.setEnabled(true);
                                resultPanel.setVisible(true);
                            }
                        }

                        if(clust != null){
                            clustVisualize();
                        }

                        if(umatDone){
                            umatVisualize();
                        }
                        if(compDone){
                            compVisualize();
                        }
                        

                        
                        if(resultPanel.getTabCount() > 0){
                            resultPanel.setVisible(true);
                        }

                        this.visFileExists = true;
                        this.setTitle("SOMVisualize - " + openFile.getName());
                        
                        runButton.setEnabled(true);
                        pauseButton.setEnabled(true);
                        stopButton.setEnabled(true);
                        cl.throwSuccessMessage("File has been successfully loaded.\n");

                        
                    } catch (ClassNotFoundException ex) {
                        cl.throwErrorMessage("File is corrupted! \n");
                    } catch (NumberFormatException ex){
                        cl.throwErrorMessage("File may not have loaded successfully! \nSome parts may have been corrupted. \n");
                    }
                    
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Error in opening file! \n", "SOM Visualize - Fatal Error", JOptionPane.ERROR_MESSAGE);
                    saveFile = null;
                }
            }
        }
    }
}//GEN-LAST:event_openFileButtonActionPerformed

private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
    cl.throwErrorMessage("Training has been paused! \n");
    cl.throwNormalMessage("You may resume training by pressing the play button. \n");
    trainer.pause();
}//GEN-LAST:event_pauseButtonActionPerformed

private void inputFacilityToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputFacilityToggleButtonActionPerformed
    //create new instance of input facility!
    if(inputFac == null){
        inputFac = new InputFacility();
    }
    else{
        inputFac.setVisible(true);
    }
}//GEN-LAST:event_inputFacilityToggleButtonActionPerformed

private void neighborhoodSizeTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_neighborhoodSizeTextFieldCaretUpdate
    try{
        int temp = Integer.parseInt(neighborhoodSizeTextField.getText());
        neighborhoodSizeTextField.setBackground(new Color(0,255,200));
        
        if(temp < 0){
            neighborhoodSizeTextField.setBackground(new Color(255,200,200));
        }
    }
    catch(NumberFormatException e){
        neighborhoodSizeTextField.setBackground(new Color(255,200,200));
    }
}//GEN-LAST:event_neighborhoodSizeTextFieldCaretUpdate

private void mapWidthTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_mapWidthTextFieldCaretUpdate
    try{
        int temp = Integer.parseInt(mapWidthTextField.getText());
        if(temp < 1){
            mapWidthTextField.setBackground(new Color(255,200,200));
        }
        else if(temp < 51){
            mapWidthTextField.setBackground(new Color(0,255,200));
        }
        else{
            mapWidthTextField.setBackground(new Color(255,200,200));
        }
    }
    catch(NumberFormatException e){
        mapWidthTextField.setBackground(new Color(255,200,200));
    }
}//GEN-LAST:event_mapWidthTextFieldCaretUpdate

private void mapHeightTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_mapHeightTextFieldCaretUpdate
    try{
        int temp = Integer.parseInt(mapHeightTextField.getText());
        if(temp < 1){
            mapHeightTextField.setBackground(new Color(255,200,200));
        }
        else if(temp < 51){
            mapHeightTextField.setBackground(new Color(0,255,200));
        }
        else{
            mapHeightTextField.setBackground(new Color(255,200,200));
        }
    }
    catch(NumberFormatException e){
        mapHeightTextField.setBackground(new Color(255,200,200));
    }
}//GEN-LAST:event_mapHeightTextFieldCaretUpdate

private void initialLearningRateTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_initialLearningRateTextFieldCaretUpdate
    try{
        double temp = Double.parseDouble(initialLearningRateTextField.getText());
        if(temp < 0){
            initialLearningRateTextField.setBackground(new Color(255,200,200));
        }
        else if(temp <= 1){
            initialLearningRateTextField.setBackground(new Color(0,255,200));
        }
        else{
            initialLearningRateTextField.setBackground(new Color(255,200,200));
        }
    }
    catch(NumberFormatException e){
        initialLearningRateTextField.setBackground(new Color(255,200,200));
    }
}//GEN-LAST:event_initialLearningRateTextFieldCaretUpdate

private void finalLearningRateTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_finalLearningRateTextFieldCaretUpdate
    try{
        double temp = Double.parseDouble(finalLearningRateTextField.getText());
        if(temp < 0){
            finalLearningRateTextField.setBackground(new Color(255,200,200));
        }
        else if(temp <= 1){
            finalLearningRateTextField.setBackground(new Color(0,255,200));
        }
        else{
            finalLearningRateTextField.setBackground(new Color(255,200,200));
        }
    }
    catch(NumberFormatException e){
        finalLearningRateTextField.setBackground(new Color(255,200,200));
    }
}//GEN-LAST:event_finalLearningRateTextFieldCaretUpdate

private void iterationsTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_iterationsTextFieldCaretUpdate
    try{
        int temp = Integer.parseInt(iterationsTextField.getText());
        if(temp < 0){
            iterationsTextField.setBackground(new Color(255,200,200));
        }
        else if(temp <= 1250000){
            iterationsTextField.setBackground(new Color(0,255,200));
        }
        else{
            iterationsTextField.setBackground(new Color(255,200,200));
        }
    }
    catch(NumberFormatException e){
        iterationsTextField.setBackground(new Color(255,200,200));
    }
}//GEN-LAST:event_iterationsTextFieldCaretUpdate

private void numberOfClustersTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_numberOfClustersTextFieldCaretUpdate
    try{
        int temp = Integer.parseInt(numberOfClustersTextField.getText());
        numberOfClustersTextField.setBackground(new Color(0,255,200));
        
        if(temp < 0){
            numberOfClustersTextField.setBackground(new Color(255,200,200));
            trainButton.setEnabled(false);
        }
    }
    catch(NumberFormatException e){
        numberOfClustersTextField.setBackground(new Color(255,200,200));
    }
}//GEN-LAST:event_numberOfClustersTextFieldCaretUpdate

private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        File tutorial = new File("Tutorial/tutorial.html");
        
        try {
            Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + tutorial.toURI());
        } catch (IOException ex) {
            Logger.getLogger(SOMVisualizeUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    
}//GEN-LAST:event_jMenuItem1ActionPerformed

private void umatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_umatButtonActionPerformed
    uMatrixVisualizeButton.doClick();
}//GEN-LAST:event_umatButtonActionPerformed

private void clustButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clustButtonActionPerformed
    clusterVisualizeButton.doClick();
}//GEN-LAST:event_clustButtonActionPerformed

private void compButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compButtonActionPerformed
    componentPlaneVisualizeButton.doClick();
}//GEN-LAST:event_compButtonActionPerformed

private void saveAsFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsFileMenuActionPerformed
    saveFile = null;
    saveFileButton.doClick();
}//GEN-LAST:event_saveAsFileMenuActionPerformed

private void openFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileMenuActionPerformed
    openFileButton.doClick();
}//GEN-LAST:event_openFileMenuActionPerformed

private void iterationsClustersTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_iterationsClustersTextFieldCaretUpdate
try{
        int temp = Integer.parseInt(iterationsClustersTextField.getText());
        if(temp < 0){
            iterationsClustersTextField.setBackground(new Color(255,200,200));
        }
        else if(temp <= 100){
            iterationsClustersTextField.setBackground(new Color(0,255,200));
        }
        else{
            iterationsClustersTextField.setBackground(new Color(255,200,200));
        }
    }
    catch(NumberFormatException e){
        iterationsClustersTextField.setBackground(new Color(255,200,200));
    }
}//GEN-LAST:event_iterationsClustersTextFieldCaretUpdate

private void clustersIdTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_clustersIdTextFieldCaretUpdate
// TODO add your handling code here:
}//GEN-LAST:event_clustersIdTextFieldCaretUpdate

private void clustersIdTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clustersIdTextFieldActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_clustersIdTextFieldActionPerformed

private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
    Classifier classy = new Classifier(trainer.getLattice(), inputDataClass);
    classy.runClassifier();
}//GEN-LAST:event_jMenuItem2ActionPerformed

public void umatVisualize(){
    umat =  new Umatrix(trainer.getLattice(),Integer.parseInt(neighborhoodSizeTextField.getText()), inputDataClass);
    umat.run();
    
    double maxAverage = 0;
    double minAverage = 0;

    for(int i=0; i<maxMin.length; i++){
       maxAverage = maxAverage+maxMin[i][0];    
       minAverage = minAverage+maxMin[i][1];
    }

    //take average
    maxAverage = maxAverage/maxMin.length;
    minAverage = minAverage/maxMin.length;

    //adjust value

    maxAverage = (umat.getMaxDistance())*(maxAverage-minAverage)+ minAverage;
    minAverage = (umat.getMinDistance())*(maxAverage-minAverage)+ minAverage;
    
    umat.setOrigMaxMin(maxAverage, minAverage);
    umat.setBounds(0,0,450,480);
    
    
    resultPanel.add("U-Matrix", umat);
    resultPanel.setSelectedIndex(resultPanel.getTabCount()-1);


}

public void clustVisualize(){
    if(clust == null){
        clust = new Cluster[Integer.parseInt(iterationsClustersTextField.getText())];
    }
    JPanel pan = new javax.swing.JPanel();
    pan.setLayout(null);
    
    for(int i=0; i<clust.length; i++){
        if(clust[i] == null){
            clust[i] = new Cluster(trainer.getLattice(), Integer.parseInt(numberOfClustersTextField.getText()));
            clust[i].run();
        }
        LatticePainter lp = new LatticePainter(clust[i].getLattice(), trainer.getInputData(), 3);
        lp.setMaxMin(clust[i].getNumberOfClusters(), 0);
        lp.setBounds((240-225)/2, (280-240)/2, 225, 240);
        JPanel lab = new JPanel();
        lab.setLayout(null);
        lab.add(lp);
        lab.setBorder(javax.swing.BorderFactory.createTitledBorder("Cluster Run " + i));
        lab.setBounds(240*(i%4),(280*(i/4)),240, 280);
        lab.setToolTipText("Cluster Run" + i);
        pan.add(lab);
    
    }
    pan.setPreferredSize(new java.awt.Dimension(240*4, 280*(clust.length/4+1)));
    javax.swing.JScrollPane scrollPan = new javax.swing.JScrollPane(pan);
    resultPanel.add("Clusters", scrollPan);
    resultPanel.setSelectedIndex(resultPanel.getTabCount()-1);
    
    if(comp != null){
        gisVisualizeButton.setEnabled(true);
    }
}

public void compVisualize(){
    
    comp = new Component[trainer.getLattice().getNumberOfNodeElements()];
    
    JPanel pan = new javax.swing.JPanel();
    pan.setLayout(null);
    
    for(int i=0; i<trainer.getLattice().getNumberOfNodeElements(); i++){
        comp[i] = new Component(trainer.getLattice(), i);
        comp[i].setBounds((240-225)/2, (280-240)/2, 225, 240);
        comp[i].setOrigMaxMin(maxMin[i][0], maxMin[i][1]);
        JPanel lab = new JPanel();
        lab.setLayout(null);
        lab.add(comp[i]);
        lab.setBorder(javax.swing.BorderFactory.createTitledBorder(inputDataClass.getVariableLabels()[i]));
        lab.setBounds(240*(i%4),(280*(i/4)),240, 280);
        lab.setToolTipText(inputDataClass.getVariableLabels()[i]);
        pan.add(lab);
        
    }
    pan.setPreferredSize(new java.awt.Dimension(240*4, 280*(trainer.getLattice().getNumberOfNodeElements()/4+1)));
    javax.swing.JScrollPane scrollPan = new javax.swing.JScrollPane(pan);
    resultPanel.add("Component Planes", scrollPan);
    resultPanel.setSelectedIndex(resultPanel.getTabCount()-1);
    
    if(clust != null){
        gisVisualizeButton.setEnabled(true);
    }
}

private void showStartUpScreen(){
    JFrame startUpScreen = new JFrame();
    JLabel startUpImage = new JLabel(new ImageIcon(getClass().getResource("/my/SOMVisualize/Icons/Splash Screen.png")));
    
    startUpScreen.setSize(507, 294);
    startUpScreen.setLocation((this.getWidth()/2) - startUpScreen.getWidth()/2, (this.getHeight()/2) - startUpScreen.getHeight()/2);
    startUpScreen.setTitle("SOM Visualize - Welcome");
    startUpScreen.setAlwaysOnTop(true);
    startUpScreen.add(startUpImage);
    startUpScreen.setVisible(true);
}

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseToggleButton;
    private javax.swing.JButton clustButton;
    private javax.swing.JLabel clusterDetailsGroup;
    private javax.swing.JButton clusterVisualizeButton;
    private javax.swing.JLabel clustersIdLabel;
    private javax.swing.JTextField clustersIdTextField;
    private javax.swing.JButton compButton;
    private javax.swing.JLabel componentPlaneDetailsGroup;
    private javax.swing.JButton componentPlaneVisualizeButton;
    private javax.swing.JScrollPane consolePanel;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JCheckBox finalLearningRateEnable;
    private javax.swing.JLabel finalLearningRateLabel;
    private javax.swing.JTextField finalLearningRateTextField;
    private javax.swing.JLabel gisDetailsGroup;
    private javax.swing.JButton gisVisualizeButton;
    private javax.swing.JLabel initialLearningRateLabel;
    private javax.swing.JTextField initialLearningRateTextField;
    private javax.swing.JLabel inputDataGroup;
    private javax.swing.JButton inputFacilityToggleButton;
    private javax.swing.JLabel inputFileLabel;
    private javax.swing.JTextField inputFileTextField;
    private javax.swing.JScrollPane inputPanel;
    private javax.swing.JPanel inputPanelHolder;
    private javax.swing.JSeparator inputPanelSeparator1;
    private javax.swing.JSeparator inputPanelSeparator2;
    private javax.swing.JSeparator inputPanelSeparator3;
    private javax.swing.JSeparator inputPanelSeparator4;
    private javax.swing.JSeparator inputPanelSeparator5;
    private javax.swing.JSeparator inputPanelSeparator6;
    private javax.swing.JLabel iterationsClustersLabel;
    private javax.swing.JTextField iterationsClustersTextField;
    private javax.swing.JLabel iterationsLabel;
    private javax.swing.JTextField iterationsTextField;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JComboBox learningRateFunctionCombo;
    private javax.swing.JLabel learningRateFunctionLabel;
    private javax.swing.JTextPane log;
    private javax.swing.JLabel mapHeightLabel;
    private javax.swing.JTextField mapHeightTextField;
    private javax.swing.JLabel mapWidthLabel;
    private javax.swing.JTextField mapWidthTextField;
    private javax.swing.JComboBox neighborhoodFunctionCombo;
    private javax.swing.JLabel neighborhoodFunctionLabel;
    private javax.swing.JLabel neighborhoodSizeLabel;
    private javax.swing.JTextField neighborhoodSizeTextField;
    private javax.swing.JButton newFileButton;
    private javax.swing.JMenuItem newFileMenu;
    private javax.swing.JComboBox nodeInfluenceFunctionCombo;
    private javax.swing.JLabel nodeInfluenceFunctionLabel;
    private javax.swing.JLabel numberOfClustersLabel;
    private javax.swing.JTextField numberOfClustersTextField;
    private javax.swing.JButton openFileButton;
    private javax.swing.JMenuItem openFileMenu;
    private javax.swing.JButton pauseButton;
    private javax.swing.JTabbedPane resultPanel;
    private javax.swing.JButton runButton;
    private javax.swing.JMenuItem saveAsFileMenu;
    private javax.swing.JButton saveFileButton;
    private javax.swing.JMenuItem saveFileMenu;
    private javax.swing.JLabel somDetailsGroup;
    private javax.swing.JButton stopButton;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JToolBar.Separator toolBarSeparator1;
    private javax.swing.JButton trainButton;
    private javax.swing.JLabel uMatrixDetailsGroup;
    private javax.swing.JButton uMatrixVisualizeButton;
    private javax.swing.JButton umatButton;
    // End of variables declaration//GEN-END:variables

    //File input and input data
    private File excelFile;
    private InputData inputDataClass;
    
    private InputFacility inputFac;
    //Trainer and visualizers
    private SOMTrainer trainer;
    private Umatrix umat;
    private Cluster[] clust;
    private Component[] comp;
    private MapBrowser gis;
    
    //Console
    private StyledDocument doc;
    private ConsoleLog cl;

    //Miscellaneous
    private double[][] maxMin;
    private Thread mapTrainer;
    
    //File Output
    private File saveFile;
    
    //Flags
    boolean visFileExists;
    boolean fileIsSaved;
    boolean umatDone;
    boolean compDone;
    
    
    class Enabler implements Runnable{

            @Override
            public void run() {
                while(mapTrainer.isAlive()){
                    if(trainer.isDoneTraining()){
                        boolean trainedFlag = false;
                        for(int i=0; i<resultPanel.getTabCount(); i++){
                            if(resultPanel.getTitleAt(i).equals("SOM Lattice")){
                                trainedFlag = true;
                            }
                        }
                        if(!trainedFlag){
                            LatticePainter lp = new LatticePainter(trainer.getLattice(), inputDataClass);
                            lp.setBounds(0,0,450,480);
                            resultPanel.add("SOM Lattice",lp);
                        }
                        uMatrixVisualizeButton.setEnabled(true);
                        clusterVisualizeButton.setEnabled(true);
                        componentPlaneVisualizeButton.setEnabled(true);
                        
                        umatButton.setEnabled(true);
                        clustButton.setEnabled(true);
                        compButton.setEnabled(true);
                        
                        resultPanel.setVisible(true);
                        break;
                    }
                    else{
                        //
                    }
                }
            }
        }
}
